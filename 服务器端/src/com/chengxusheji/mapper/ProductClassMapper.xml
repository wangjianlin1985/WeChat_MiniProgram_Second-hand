<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.ProductClassMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加商品分类记录 -->
	<insert id="addProductClass" parameterType="productClass">
		insert into t_productClass(productClassName) values 
		(#{productClassName})
	</insert>

	<!-- 按照查询条件分页查询商品分类记录 -->
	<select id="queryProductClass" resultMap="productClassMap" >
		select t_productClass.* from t_productClass ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="productClassMap" type="productClass">
        <id property="productClassId" column="productClassId" />
    </resultMap>

    <!-- 按照查询条件查询所有商品分类记录 -->
	<select id="queryProductClassList" resultMap="productClassMap" >
		select t_productClass.* from t_productClass ${where}
	</select>

    <!-- 按照查询条件的商品分类记录数 -->
	<select id="queryProductClassCount" resultType="int">
		select count(*) from t_productClass ${where}
	</select>

	<!-- 根据主键查询某个商品分类记录 -->
	<select id="getProductClass" parameterType="int" resultMap="productClassMap">
		select * from t_productClass where t_productClass.productClassId = #{productClassId}
	</select>

	<!-- 更新商品分类记录 -->
	<update id="updateProductClass" parameterType="productClass">
		update t_productClass set productClassName=#{productClassName} where productClassId = #{productClassId}
	</update>

	<!-- 删除商品分类记录 -->
	<delete id="deleteProductClass" parameterType="int">
		delete from t_productClass where productClassId=#{productClassId}
	</delete>

</mapper>
